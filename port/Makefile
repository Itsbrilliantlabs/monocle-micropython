MICROPY_ROM_TEXT_COMPRESSION ?= 1
MICROPY_VFS_LFS2 = 1
MICROPY_VFS_FAT = 0
FROZEN_MANIFEST = ../python/manifest.py
CROSS_COMPILE = arm-none-eabi-

include ../micropython/py/mkenv.mk
include ../micropython/extmod/extmod.mk
include ../micropython/py/py.mk

NRF = 52832
SD = s132
SOFTDEVICE_VERSION = 7.3.0
HEXMERGE = hexmerge.py --overlap=ignore
OPENOCD = openocd
OPENOCD_FLASH = -c "init; nrf52_recover; program build/firmware.hex verify; exit"
OPENOCD_GDB = -c "init; gdb_port 3334"
OPENOCD_STLINK = -f interface/stlink-dap.cfg -f target/nrf52.cfg
OPENOCD_JLINK = -f interface/jlink.cfg -c "transport select swd" -f target/nrf52.cfg
NRFJPROG = nrfjprog
NRFUTIL = nrfutil
JLINKGDBSERVERCL = JLinkGDBServerCLExe
GDB = gdb-multiarch
PYTHON = python3

# Complete firmware containing everything.
FIRMWARE_HEX = build/firmware.hex

# Hex file with everything to include into a DFU package.
DFU_PACKAGE_HEX = build/dfu_package.hex

# Signed Zip archive of the merged dfu package hex file.
DFU_PACKAGE_ZIP = build/dfu_package.zip

# Softdevice binary placed to the flash, imported from the nRF5-SDK
SOFTDEVICE_HEX = ../$(SD)/$(SD)_nrf52_$(SOFTDEVICE_VERSION)_softdevice.hex

# Application built by this Makefile
APPLICATION_HEX := build/application.hex

# Bluetooth settings generated by nrfutil below
BLSETTINGS_HEX := build/blsettings.hex

# Bootloader from Swaralink
BOOTLOADER_HEX := ../bootloader/build/nrf52832_xxaa_s132.hex

# Key used by the Swaralink bootloader
BOOTLOADER_KEY := ../bootloader/published_privkey.pem

CFLAGS += $(DEF) $(INC) $(CFLAGS_EXTRA) $(CFLAGS_MOD) $(CFLAGS_MCU_m4)
CFLAGS += -mthumb
CFLAGS += -mabi=aapcs
CFLAGS += -fsingle-precision-constant
CFLAGS += -Wdouble-promotion
CFLAGS += -mtune=cortex-m4
CFLAGS += -mcpu=cortex-m4
CFLAGS += -mfpu=fpv4-sp-d16
CFLAGS += -mfloat-abi=hard
CFLAGS += -ffunction-sections -fdata-sections
CFLAGS += -Wall
CFLAGS += -ansi
CFLAGS += -std=c11
CFLAGS += -nostdlib
CFLAGS += -fno-strict-aliasing
CFLAGS += -g -Os

LDFLAGS = $(CFLAGS)
LDFLAGS += -Wl,--gc-sections
LDFLAGS += -Xlinker -Map=$(@:.elf=.map)
LDFLAGS += -mthumb -mabi=aapcs -Tnrf$(NRF).ld

LIBS += -lgcc -lm

INC += -I.
INC += -Ibuild
INC += -Idrivers
INC += -Imodules
INC += -I../micropython
INC += -I../micropython/lib/cmsis/inc
INC += -I../micropython/shared/readline
INC += -I../nrfx
INC += -I../nrfx/drivers
INC += -I../nrfx/drivers/include
INC += -I../nrfx/drivers/src
INC += -I../nrfx/hal
INC += -I../nrfx/helpers
INC += -I../nrfx/mdk
INC += -I../$(SD)/include
INC += -I../$(SD)/include/nrf52

DEF += -DNRF$(NRF)_XXAA
DEF += -DNRF$(NRF)
DEF += -DCONFIG_GPIO_AS_PINRESET
DEF += -DNRF5_HAL_H="<nrf$(NRF)_hal.h>"
DEF += -DSOFTDEVICE_PRESENT
DEF += -DBLUETOOTH_SD=132
DEF += -DBLUETOOTH_SD_DEBUG=1
DEF += -DMICROPY_QSTR_EXTRA_POOL=mp_qstr_frozen_const_pool
DEF += -DMICROPY_MODULE_FROZEN_MPY
DEF += -DMICROPY_MODULE_FROZEN_STR

# https://github.com/sandeepmistry/arduino-nRF5/issues/206
DEF += -DCONFIG_NFCT_PINS_AS_GPIOS

SRC += help.c
SRC += main.c
SRC += mphalport.c
SRC += nrf$(NRF).c

SRC += drivers/monocle_battery.c
SRC += drivers/monocle_ble.c
SRC += drivers/monocle_board.c
SRC += drivers/monocle_checksum.c
SRC += drivers/monocle_dfu.c
SRC += drivers/monocle_ecx335af.c
SRC += drivers/monocle_flash.c
SRC += drivers/monocle_fpga.c
SRC += drivers/monocle_i2c.c
SRC += drivers/monocle_iqs620.c
SRC += drivers/monocle_max77654.c
SRC += drivers/monocle_ov5640.c
SRC += drivers/monocle_spi.c
SRC += drivers/monocle_touch.c

SRC += modules/board.c
SRC += modules/board_led.c
SRC += modules/machine.c
SRC += modules/machine_battery.c
SRC += modules/machine_fpga.c
SRC += modules/machine_rtcounter.c
SRC += modules/machine_timer.c
SRC += modules/machine_touch.c
SRC += modules/machine_power.c

SRC += ../micropython/lib/libm/acoshf.c
SRC += ../micropython/lib/libm/asinfacosf.c
SRC += ../micropython/lib/libm/asinhf.c
SRC += ../micropython/lib/libm/atan2f.c
SRC += ../micropython/lib/libm/atanf.c
SRC += ../micropython/lib/libm/atanhf.c
SRC += ../micropython/lib/libm/ef_rem_pio2.c
SRC += ../micropython/lib/libm/ef_sqrt.c
SRC += ../micropython/lib/libm/erf_lgamma.c
SRC += ../micropython/lib/libm/fmodf.c
SRC += ../micropython/lib/libm/kf_cos.c
SRC += ../micropython/lib/libm/kf_rem_pio2.c
SRC += ../micropython/lib/libm/kf_sin.c
SRC += ../micropython/lib/libm/kf_tan.c
SRC += ../micropython/lib/libm/log1pf.c
SRC += ../micropython/lib/libm/math.c
SRC += ../micropython/lib/libm/nearbyintf.c
SRC += ../micropython/lib/libm/roundf.c
SRC += ../micropython/lib/libm/sf_cos.c
SRC += ../micropython/lib/libm/sf_erf.c
SRC += ../micropython/lib/libm/sf_frexp.c
SRC += ../micropython/lib/libm/sf_ldexp.c
SRC += ../micropython/lib/libm/sf_modf.c
SRC += ../micropython/lib/libm/sf_sin.c
SRC += ../micropython/lib/libm/sf_tan.c
SRC += ../micropython/lib/libm/wf_lgamma.c
SRC += ../micropython/lib/libm/wf_tgamma.c
SRC += ../micropython/shared/libc/string0.c
SRC += ../micropython/shared/readline/readline.c
SRC += ../micropython/shared/runtime/interrupt_char.c
SRC += ../micropython/shared/runtime/pyexec.c
SRC += ../micropython/shared/runtime/sys_stdio_mphal.c
SRC += ../micropython/shared/timeutils/timeutils.c

SRC += ../nrfx/drivers/src/nrfx_clock.c
SRC += ../nrfx/drivers/src/nrfx_gpiote.c
SRC += ../nrfx/drivers/src/nrfx_nvmc.c
SRC += ../nrfx/drivers/src/nrfx_rtc.c
SRC += ../nrfx/drivers/src/nrfx_saadc.c
SRC += ../nrfx/drivers/src/nrfx_spi.c
SRC += ../nrfx/drivers/src/nrfx_spim.c
SRC += ../nrfx/drivers/src/nrfx_systick.c
SRC += ../nrfx/drivers/src/nrfx_timer.c
SRC += ../nrfx/drivers/src/nrfx_twi.c
SRC += ../nrfx/drivers/src/prs/nrfx_prs.c
SRC += ../nrfx/helpers/nrfx_flag32_allocator.c
SRC += ../nrfx/mdk/system_nrf52.c

SRC_QSTR += $(SRC) $(SRC_MOD)

OBJ += $(PY_O)
OBJ += $(addprefix build/, $(SRC:.c=.o))

all: ${FIRMWARE_HEX} ${DFU_PACKAGE_ZIP}

flash_openocd_stlink:
	$(OPENOCD) $(OPENOCD_STLINK) $(OPENOCD_FLASH)

flash_openocd_jlink:
	$(OPENOCD) $(OPENOCD_JLINK) $(OPENOCD_FLASH)

flash_nrfjprog_jlink:
	$(NRFJPROG) --recover --verify --family nrf52 --program ${FIRMWARE_HEX}

gdb_openocd_stlink:
	$(OPENOCD) $(OPENOCD_STLINK) -c "gdb_port 2331"

gdb_openocd_jlink:
	$(OPENOCD) $(OPENOCD_JLINK) -c "gdb_port 2331"

gdb_segger_jlink:
	$(JLINKGDBSERVERCL) -device nrf$(NRF)_XXAA -if SWD

gdb:
	$(GDB) \
	    -ex "target extended-remote :2331" \
	    -ex "monitor reset halt" \
	    -ex "continue" build/application.elf

build/application.elf: $(OBJ)
	$(ECHO) "LINK $@"
	$(Q)$(CC) $(LDFLAGS) -o $@ $(OBJ) $(LDFLAGS_MOD) $(LIBS)
	$(Q)$(SIZE) $@

${FIRMWARE_HEX}: $(SOFTDEVICE_HEX) $(BOOTLOADER_HEX) ${APPLICATION_HEX} $(BLSETTINGS_HEX)
	$(HEXMERGE) $(APPLICATION_HEX) $(BOOTLOADER_HEX) $(SOFTDEVICE_HEX) $(BLSETTINGS_HEX) -o $@

$(BLSETTINGS_HEX): $(APPLICATION_HEX)
	$(NRFUTIL) settings generate --family NRF52 --application ${APPLICATION_HEX} --application-version 0 --bootloader-version 0 --bl-settings-version 2 $@

$(DFU_PACKAGE_HEX): $(APPLICATION_HEX) $(BLSETTINGS_HEX)
	$(HEXMERGE) $(APPLICATION_HEX) $(BLSETTINGS_HEX) -o $@

$(DFU_PACKAGE_ZIP): $(BOOTLOADER_KEY) $(DFU_PACKAGE_HEX)
	$(NRFUTIL) pkg generate --hw-version 52 --application-version 1 --application $(DFU_PACKAGE_HEX) --sd-req 0xB6 --key-file $(BOOTLOADER_KEY) $@

.SUFFIXES: .elf .hex

.elf.hex:
	$(OBJCOPY) -O ihex $< $@

include ../micropython/py/mkrules.mk
